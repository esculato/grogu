########################### NETWORKS
networks:
  default:
    driver: bridge
  socket_proxy:
    name: socket_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.14.0/24
  t3_proxy:
    name: t3_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.15.0/24

########################### SECRETS
secrets:
  basic_auth_credentials:
    file: $DOCKERDIR/secrets/basic_auth_credentials
  cf_dns_api_token:
    file: $DOCKERDIR/secrets/cf_dns_api_token
  authelia_jwt_secret:
    file: $DOCKERDIR/secrets/authelia_jwt_secret
  authelia_session_secret:
    file: $DOCKERDIR/secrets/authelia_session_secret
  authelia_storage_encryption_key:
    file: $DOCKERDIR/secrets/authelia_storage_encryption_key

########################### SERVICES
services:

############# CORE
  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    image: linuxserver/socket-proxy:3.2.5-r0-ls56@sha256:1be5bc2319d84e94999ad8461aa5864dae245d63247779bbd5630ba7151b30b7
    container_name: socket-proxy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    #profiles: ["core", "all"]
    networks:
      socket_proxy:
        ipv4_address: 192.168.14.254 # You can specify a static IP
    privileged: false # true for VM. False (default) for unprivileged LXC container.
    # ports:
      #- "2375:2375"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    read_only: true
    tmpfs:
      - /run
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      - ALLOW_START=1 # Portainer
      - ALLOW_STOP=1 # Portainer
      - ALLOW_RESTARTS=1 # Portainer
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer
      - DISABLE_IPV6=0 #optional

  # Traefik 3 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:3.5.3@sha256:d6be8725d21b45bdd84b93ea01438256e0e3c94aa8fa51834fe87f37cd5d4af8
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
   # profiles: ["core", "all"]
    depends_on:
      - socket-proxy
    networks:
      t3_proxy:
        ipv4_address: 192.168.15.254 # You can specify a static IP
      socket_proxy:
      default:
    logging:
      driver: "json-file"
      options:
        max-size: "10m"     # rotate after 10MB
        max-file: "2"       # keep last 2 logs
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entrypoints.web-external.address=:81
      - --entrypoints.web-internal.address=:80
      - --entrypoints.websecure-external.address=:444
      - --entrypoints.websecure-internal.address=:443
      - --entrypoints.traefik.address=:8080
      - --entrypoints.websecure-external.http3=true
      - --entrypoints.websecure-internal.http3=true
      - --entrypoints.web-external.http.redirections.entrypoint.to=websecure-external
      - --entrypoints.web-external.http.redirections.entrypoint.scheme=https
      - --entrypoints.web-external.http.redirections.entrypoint.permanent=true
      - --entrypoints.web-internal.http.redirections.entrypoint.to=websecure-internal
      - --entrypoints.web-internal.http.redirections.entrypoint.scheme=https
      - --entrypoints.web-internal.http.redirections.entrypoint.permanent=true
      - --api=true
      - --api.dashboard=true
      - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.websecure-external.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entrypoints.websecure-internal.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=info # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      # - --providers.docker.endpoint=unix:///var/run/docker.sock # Disable for Socket Proxy. Enable otherwise.
      - --providers.docker.endpoint=$DOCKER_HOST # Enable for Socket Proxy. Disable otherwise.
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t3_proxy
      # - --providers.swarm.endpoint=tcp://127.0.0.1:2377 # Traefik v3 Swarm
      - --entrypoints.websecure-external.http.tls=true
      - --entrypoints.websecure-external.http.tls.options=tls-opts@file
      - --entrypoints.websecure-internal.http.tls=true
      - --entrypoints.websecure-internal.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.websecure-external.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure-internal.http.tls.certresolver=dns-cloudflare
      - --entrypoints.websecure-external.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.websecure-external.http.tls.domains[0].sans=*.$DOMAINNAME
      - --entrypoints.websecure-internal.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.websecure-internal.http.tls.domains[0].sans=*.$DOMAINNAME
      # - DOMAINS-PLACEHOLDER-DO-NOT-DELETE
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.propagation.delaybeforechecks=120 # To delay DNS check and reduce LE hitrate
      #- --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.propagation.disablechecks=true # Not recommended
      # - METRICS-PLACEHOLDER-DO-NOT-DELETE
      # - Crowdsec Bouncer Traefik plugin
      - --experimental.plugins.bouncer.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin
      - --experimental.plugins.bouncer.version=v1.4.5
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
      - "444:444"
      - "$TRAEFIK_PORT:8080"
    volumes:
      - $DOCKERDIR/appdata/traefik3/rules/$HOSTNAME_HS/:/rules
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/traefik3/acme/acme.json:/acme.json
      - $DOCKERDIR/logs/$HOSTNAME_HS/traefik:/logs
    environment:
      - TZ=$TZ
      - CF_DNS_API_TOKEN_FILE=/run/secrets/cf_dns_api_token
      - HTPASSWD_FILE=/run/secrets/basic_auth_credentials # HTTP Basic Auth Credentials
      - DOMAINNAME # Passing the domain name to traefik container to be able to use the variable in rules.
      # - TRAEFIK_AUTH_BYPASS_KEY
    secrets:
      - cf_dns_api_token
      - basic_auth_credentials
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure-internal,websecure-external"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      # Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-authelia@file"

  # Authelia (Lite) - Self-Hosted Single Sign-On and Two-Factor Authentication
  authelia:
    container_name: authelia
    image: authelia/authelia:4.39.11@sha256:30e45eeb81c8d82ad7679df008a57b61253c932341c861ef3fb20776804ca251
    security_opt:
      - no-new-privileges:true
    restart: always
 #   profiles: ["core", "all"]
    networks:
      - default
      - t3_proxy
    # depends_on:
    #  redis:
    #    condition: service_healthy
    # ports:
    #   - "$AUTHELIA_PORT:9091"
    volumes:
      - $DOCKERDIR/appdata/authelia:/config
    environment:
      - TZ=$TZ
      - PUID=$PUID
      - PGID=$PGID
      - AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE=/run/secrets/authelia_jwt_secret
      - AUTHELIA_SESSION_SECRET_FILE=/run/secrets/authelia_session_secret
      - AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE=/run/secrets/authelia_storage_encryption_key
      # - AUTHELIA_STORAGE_MYSQL_PASSWORD_FILE=/run/secrets/authelia_storage_mysql_password
      # - AUTHELIA_SESSION_REDIS_PASSWORD_FILE=/run/secrets/authelia_session_redis_password
      # - AUTHELIA_DUO_API_INTEGRATION_KEY_FILE=/run/secrets/authelia_duo_api_integration_key
      # - AUTHELIA_DUO_API_SECRET_KEY_FILE=/run/secrets/authelia_duo_api_secret_key
    secrets:
      - authelia_jwt_secret
      - authelia_storage_encryption_key
      - authelia_session_secret
    labels:
      - "traefik.enable=true"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:2.34.0@sha256:d61738f5a4670c50395a13a42345a5b9675d96573817ef009a6c7de48ce5a13d
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
#    profiles: ["core", "all"]
    networks:
      - default
      - socket_proxy
      - t3_proxy
    # command: -H unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    command: -H tcp://socket-proxy:2375
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"


############# SECURITY

  # CrowdSec - Open-source & Collaborative IPS
  crowdsec:
    image: crowdsecurity/crowdsec:v1.7.0@sha256:26841bec239f53c74f5ac35ca89166b0566c511a449c4852d3187c8a62faf4ed
    container_name: crowdsec
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
  #  profiles: ["core", "all"]
    networks:
      - default
    ports:
      - "$CROWDSEC_PORT:8080" # Local API port
      - "6060:6060" # Exposing metrics via Zerotier IP / Prometheus
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux fulljackz/proxmox crowdsecurity/sshd"
      GID: $PGID
      CUSTOM_HOSTNAME: $HOSTNAME_HS
    volumes:
      - $DOCKERDIR/logs/$HOSTNAME_HS:/logs/$HOSTNAME_HS:ro
      - /var/log:/var/log:ro
      - $DOCKERDIR/appdata/crowdsec/data:/var/lib/crowdsec/data
      - $DOCKERDIR/appdata/crowdsec/config:/etc/crowdsec

  # CrowdSec Bouncer - Cloudflare
  cloudflare-bouncer:
    image: crowdsecurity/cloudflare-bouncer:v0.3.0@sha256:39719a070c154866ebc81335e70fdfa1c61eac45025fee7d9bbf8da689fbb2c6
    container_name: cloudflare-bouncer
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
  #  profiles: ["core", "all"]
    networks:
      - default
      - t3_proxy
    volumes:
      - $DOCKERDIR/appdata/cloudflare-bouncer/cfg.yaml:/etc/crowdsec/bouncers/crowdsec-cloudflare-bouncer.yaml

  # CrowdSec Bouncer - Traefik
#  traefik-bouncer:
#    image: fbonalair/traefik-crowdsec-bouncer
#    container_name: traefik-bouncer
#    security_opt:
#      - no-new-privileges:true
#    restart: unless-stopped
#  #  profiles: ["core", "all"]
#    networks:
#      - default
#    environment:
#      GIN_MODE: release # default is debug (more logs)
#      CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY
#      CROWDSEC_AGENT_HOST: crowdsec:8080 # CrowdSec host and port
#      CROWDSEC_BOUNCER_LOG_LEVEL: 2 # https://pkg.go.dev/github.com/rs/zerolog#readme-leveled-logging


############# MONITORING

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    container_name: dozzle
    image: amir20/dozzle:v8.14.4
    security_opt:
      - no-new-privileges:true
    restart: always
#    profiles: ["apps", "all"]
    networks:
      - default
      - socket_proxy
      - t3_proxy
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      - DOZZLE_NO_ANALYTICS=1
      - DOZZLE_LEVEL=info
#      - DOZZLE_TAILSIZE=300
      - DOZZLE_FILTER="status=running"
      # - DOZZLE_FILTER="label=log_me" # limits logs displayed to containers with this label
      - DOCKER_HOST
      - DOZZLE_REMOTE_AGENT=192.168.5.7:7007,192.168.5.8:7007
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"

  # Uptime Kuma - Status Page & Monitoring Server
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1.23.16@sha256:431fee3be822b04861cf0e35daf4beef6b7cb37391c5f26c3ad6e12ce280fe18
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    #profiles: ["core", "all"]
    networks:
      - default
      - socket_proxy
      - t3_proxy
    ports:
      - $UPTIMEKUMA_PORT:3001
    volumes:
      - $DOCKERDIR/appdata/uptime-kuma:/app/data
    labels:
      - "traefik.enable=true"


############# FRONTEND

  # Home Assistent Container
  homeassistant:
    container_name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:2025.10.1@sha256:9255033272ab8f7bede246109ea9e7302527faf3accbf2ba7ef619e2206107ad
    volumes:
      - $DOCKERDIR/appdata/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    restart: always
    networks:
      - t3_proxy
    ports:
      - $HOMEASSISTANT_PORT:8123
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"


  # Homepage - Application Dashboard
  homepage:
    container_name: homepage
    image: ghcr.io/gethomepage/homepage:v1.5.0@sha256:e7fc26f914cf5e7dcd6c566e24ca218addb879aa76478ad4a553b1f9ae48b1d7
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
 #   profiles: ["apps", "all"]
    networks:
      - default
      - socket_proxy
      - t3_proxy
    ports:
      - "$HOMEPAGE_PORT:3000"
    volumes:
      - $DOCKERDIR/appdata/homepage:/app/config
    environment:
      TZ: $TZ
      PUID: $PUID
      PGID: $PGID
      HOMEPAGE_ALLOWED_HOSTS: "*"
    labels:
      - "traefik.enable=true"


############# BACKEND

  # Mosquitto - MQTT Broker
  # Create mosquitto.conf, passwd, mosquitto.log files  and set permissions to 775 user:docker
  # dexec mosquitto /bin/sh -> mosquitto_passwd -b /mosquitto/config/passwd username passwd
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:2.0.22@sha256:fd9982f5ed92a6c2a90805601d2275f8fbd7f2d47c4cb3836f7db0bdc7a91bec
    restart: always
    #network_mode: host
    networks:
      - default
      - t3_proxy
    ports:
      - "1883:1883" #http
      - "8997:9001" #websockets
    volumes:
      - $DOCKERDIR/appdata/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - $DOCKERDIR/appdata/mosquitto/config/passwd:/mosquitto/config/passwd
      - $DOCKERDIR/appdata/mosquitto/log:/mosquitto/log
      - $DOCKERDIR/appdata/mosquitto/data:/mosquitto/data
    environment:
      - TZ=$TZ

  # Zigbee@MQTT
  zigbee2mqtt:
    container_name: zigbee2mqtt
    restart: always
    image: koenkk/zigbee2mqtt:2.6.2@sha256:ffabf256f4550175278fbeebdbc3f174f2ffa005175e755324c5f06020af3e68
    privileged: true
    networks:
      - default
      - t3_proxy
    volumes:
      - $DOCKERDIR/appdata/zigbee2mqtt:/app/data
      - /run/udev:/run/udev:ro
    ports:
      - $ZIGBEE2MQTT_PORT:8080
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    #  - /dev/serial/by-id/usb-sonoff:/dev/ttyUSB0
    labels:
      - "traefik.enable=true"

  # ESPHome
  esphome:
    container_name: esphome
    image: esphome/esphome:2025.9.3@sha256:7d5891a3cdfec43236a5dbabd6ea1c58cc5affc2546eb204899e5f9ae04d6959
    restart: always
    networks:
      - t3_proxy
      - default
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - ESPHOME_DASHBOARD_USE_PING=true
    ports:
      - 6052:6052
      - 6123:6123
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/esphome:/config
    labels:
      - "traefik.enable=true"
      
  # Node-RED
  node-red:
    container_name: node-red
    image: nodered/node-red:4.1.0@sha256:da6ac47cce14ed8df7ceddc8a15c8f4c0a41e0836c4d6e68e7a6a82329305a6b
    restart: always    
    networks:
      - socket_proxy
      - t3_proxy
    ports:
      - 1880:1880
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/appdata/node-red:/data
    labels:
      - "traefik.enable=true"

      
############# MAINTENANCE

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  docker-gc:
    container_name: docker-gc
    image: clockworksoul/docker-gc-cron:20240504@sha256:5c29b290ae4cb00a8e77232596ea0e33f174695bde816a98f21b4b3935cd6875
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
#    profiles: ["apps", "all"]
    networks:
      - socket_proxy
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      - CRON=0 0 0 * * ? # every day at midnight. Previously 0 0 * * *
      - FORCE_IMAGE_REMOVAL=1
      - FORCE_CONTAINER_REMOVAL=0
      - GRACE_PERIOD_SECONDS=604800
      - DRY_RUN=0
      - CLEAN_UP_VOLUMES=1
      - TZ=$TZ

  # Cloudflare DDNS - Dynamic DNS Updater
  cloudflare-ddns:
    container_name: cloudflare-ddns
    image: favonia/cloudflare-ddns:latest
    # Choose the appropriate tag based on your need:
    # - "latest" for the latest stable version (which could become 2.x.y
    #   in the future and break things)
    # - "1" for the latest stable version whose major version is 1
    # - "1.x.y" to pin the specific version 1.x.y
    network_mode: host
    # This bypasses network isolation and makes IPv6 easier (optional; see below)
    restart: always
    # Restart the updater after reboot
    user: "1000:1000"
    # Run the updater with specific user and group IDs (in that order).
    # You can change the two numbers based on your need.
    read_only: true
    # Make the container filesystem read-only (optional but recommended)
    cap_drop: [all]
    # Drop all Linux capabilities (optional but recommended)
    security_opt: [no-new-privileges:true]
    # Another protection to restrict superuser privileges (optional but recommended)
    environment:
      - CLOUDFLARE_API_TOKEN=$CLOUDFLARE_API_TOKEN
        # Your Cloudflare API token
      - DOMAINS=kemeel.com
        # Your domains (separated by commas)
      - PROXIED=true
        # Tell Cloudflare to cache webpages and hide your IP (optional)
      - IP6_PROVIDER=none
